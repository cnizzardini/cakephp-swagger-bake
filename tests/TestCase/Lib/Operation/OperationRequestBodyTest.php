<?php

namespace SwaggerBake\Test\TestCase\Lib\Operation;

use Cake\Routing\RouteBuilder;
use Cake\Routing\Router;
use Cake\TestSuite\TestCase;
use phpDocumentor\Reflection\DocBlockFactory;
use SwaggerBake\Lib\Annotation\SwagDto;
use SwaggerBake\Lib\Annotation\SwagForm;
use SwaggerBake\Lib\Annotation\SwagRequestBody;
use SwaggerBake\Lib\Model\ModelScanner;
use SwaggerBake\Lib\Route\RouteScanner;
use SwaggerBake\Lib\Configuration;
use SwaggerBake\Lib\OpenApi\Operation;
use SwaggerBake\Lib\OpenApi\Schema;
use SwaggerBake\Lib\OpenApi\SchemaProperty;
use SwaggerBake\Lib\Operation\OperationRequestBody;
use SwaggerBake\Lib\Swagger;

class OperationRequestBodyTest extends TestCase
{
    public $fixtures = [
        'plugin.SwaggerBake.Employees',
    ];

    private $router;
    private $config;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $router = new Router();
        $router::scope('/', function (RouteBuilder $builder) {
            $builder->setExtensions(['json']);
            $builder->resources('Employees', [
                'only' => ['create']
            ]);
        });
        $this->router = $router;

        $this->config = [
            'prefix' => '/',
            'yml' => '/config/swagger-bare-bones.yml',
            'json' => '/webroot/swagger.json',
            'webPath' => '/swagger.json',
            'hotReload' => false,
            'exceptionSchema' => 'Exception',
            'requestAccepts' => ['application/x-www-form-urlencoded'],
            'responseContentTypes' => ['application/json'],
            'namespaces' => [
                'controllers' => ['\SwaggerBakeTest\App\\'],
                'entities' => ['\SwaggerBakeTest\App\\'],
                'tables' => ['\SwaggerBakeTest\App\\'],
            ]
        ];
    }

    public function testSwagFormGetOperationWithRequestBody()
    {
        $config = new Configuration($this->config, SWAGGER_BAKE_TEST_APP);
        $cakeRoute = new RouteScanner($this->router, $config);
        $cakeModels = new ModelScanner($cakeRoute, $config);
        $swagger = new Swagger($cakeModels);

        $routes = $cakeRoute->getRoutes();
        $route = $routes['employees:add'];

        $operationRequestBody = new OperationRequestBody(
            $swagger,
            (new Operation())->setHttpMethod('POST'),
            [
                new SwagForm(['name' => 'test', 'type' => 'string', 'description' => '', 'required' => false])
            ],
            $route,
            null
        );

        $operation = $operationRequestBody->getOperationWithRequestBody();

        $requestBody = $operation->getRequestBody();
        $content = $requestBody->getContentByType('application/x-www-form-urlencoded');

        $schema = $content->getSchema();
        $this->assertEquals('object', $schema->getType());

        $properties = $schema->getProperties();
        $this->assertArrayHasKey('test', $properties);;
    }

    public function testSwagDtoGetOperationWithRequestBody()
    {
        $config = new Configuration($this->config, SWAGGER_BAKE_TEST_APP);
        $cakeRoute = new RouteScanner($this->router, $config);
        $cakeModels = new ModelScanner($cakeRoute, $config);
        $swagger = new Swagger($cakeModels);

        $routes = $cakeRoute->getRoutes();
        $route = $routes['employees:add'];

        $operationRequestBody = new OperationRequestBody(
            $swagger,
            (new Operation())->setHttpMethod('POST'),
            [
                new SwagDto(['class' => '\SwaggerBakeTest\App\Dto\EmployeeData'])
            ],
            $route,
            null
        );

        $operation = $operationRequestBody->getOperationWithRequestBody();

        $requestBody = $operation->getRequestBody();
        $content = $requestBody->getContentByType('application/x-www-form-urlencoded');

        $schema = $content->getSchema();
        $this->assertEquals('object', $schema->getType());

        $properties = $schema->getProperties();
        $this->assertArrayHasKey('lastName', $properties);
        $this->assertArrayHasKey('firstName', $properties);
    }

    public function testIgnoreSchema()
    {
        $config = new Configuration($this->config, SWAGGER_BAKE_TEST_APP);
        $cakeRoute = new RouteScanner($this->router, $config);
        $cakeModels = new ModelScanner($cakeRoute, $config);
        $swagger = new Swagger($cakeModels);

        $routes = $cakeRoute->getRoutes();
        $route = $routes['employees:add'];

        $operationRequestBody = new OperationRequestBody(
            $swagger,
            (new Operation())->setHttpMethod('POST'),
            [
                new SwagRequestBody(['ignoreSchema' => true])
            ],
            $route,
            null
        );

        $operation = $operationRequestBody->getOperationWithRequestBody();
        $this->assertEmpty($operation->getRequestBody()->getContent());
    }
}