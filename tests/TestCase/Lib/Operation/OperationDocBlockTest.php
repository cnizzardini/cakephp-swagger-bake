<?php

namespace SwaggerBake\Test\TestCase\Lib\Operation;

use Cake\Http\Exception\InternalErrorException;
use Cake\Routing\RouteBuilder;
use Cake\Routing\Router;
use Cake\TestSuite\TestCase;
use phpDocumentor\Reflection\DocBlockFactory;
use SwaggerBake\Lib\Configuration;
use SwaggerBake\Lib\Model\ModelScanner;
use SwaggerBake\Lib\OpenApi\Operation;
use SwaggerBake\Lib\Operation\OperationDocBlock;
use SwaggerBake\Lib\Route\RouteScanner;
use SwaggerBake\Lib\Swagger;

class OperationDocBlockTest extends TestCase
{
    /**
     * @var string[]
     */
    public $fixtures = [
        'plugin.SwaggerBake.Employees',
    ];

    private Router $router;

    private array $config;

    private Operation $operation;

    public function __construct(?string $name = null, array $data = [], $dataName = '')
    {
        parent::__construct($name, $data, $dataName);
        $this->operation = (new Operation('hello', 'get'));
    }

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $router = new Router();
        $router::scope('/', function (RouteBuilder $builder) {
            $builder->setExtensions(['json']);
            $builder->resources('Employees', [
                'only' => ['create']
            ]);
        });
        $this->router = $router;

        $this->config = [
            'prefix' => '/',
            'yml' => '/config/swagger-bare-bones.yml',
            'json' => '/webroot/swagger.json',
            'webPath' => '/swagger.json',
            'hotReload' => false,
            'exceptionSchema' => 'Exception',
            'requestAccepts' => ['application/x-www-form-urlencoded'],
            'responseContentTypes' => ['application/json'],
            'namespaces' => [
                'controllers' => ['\SwaggerBakeTest\App\\'],
                'entities' => ['\SwaggerBakeTest\App\\'],
                'tables' => ['\SwaggerBakeTest\App\\'],
            ]
        ];
    }

    /**
     * @throws InternalErrorException
     */
    public function test_external_documentation_tags(): void
    {

        $config = new Configuration($this->config, SWAGGER_BAKE_TEST_APP);
        $cakeRoute = new RouteScanner($this->router, $config);
        $cakeModels = new ModelScanner($cakeRoute, $config);
        $swagger = new Swagger($cakeModels);

        foreach (['see','link'] as $tag) {
            $block = <<<EOT
/** 
 * @$tag https://www.cakephp.org CakePHP
 */
EOT;
            $docBlock = DocBlockFactory::createInstance()->create($block);
            $operation = (new OperationDocBlock($swagger, $config, $this->operation, $docBlock))->getOperation();
            $doc = $operation->getExternalDocs();

            $this->assertEquals('CakePHP', $doc->getDescription());
            $this->assertEquals('https://www.cakephp.org', $doc->getUrl());
        }

    }

    /**
     * @throws InternalErrorException|\ReflectionException
     */
    public function test_external_documentation_tags_without_description(): void
    {
        $config = new Configuration($this->config, SWAGGER_BAKE_TEST_APP);
        $cakeRoute = new RouteScanner($this->router, $config);
        $cakeModels = new ModelScanner($cakeRoute, $config);
        $swagger = new Swagger($cakeModels);

        foreach (['see','link'] as $tag) {
            $block = <<<EOT
/** 
 * @$tag https://www.cakephp.org
 */
EOT;
            $docBlock = DocBlockFactory::createInstance()->create($block);
            $operation = (new OperationDocBlock($swagger, $config, $this->operation, $docBlock))->getOperation();
            $doc = $operation->getExternalDocs();

            $this->assertEquals('', $doc->getDescription());
            $this->assertEquals('https://www.cakephp.org', $doc->getUrl());
        }
    }

    /**
     * @throws \ReflectionException
     */
    public function test_external_documentation_not_set_when_url_invalid(): void
    {
        $config = new Configuration($this->config, SWAGGER_BAKE_TEST_APP);
        $cakeRoute = new RouteScanner($this->router, $config);
        $cakeModels = new ModelScanner($cakeRoute, $config);
        $swagger = new Swagger($cakeModels);

        foreach (['see','link'] as $tag) {
            $block = <<<EOT
/** 
 * @$tag htt:/www.cakephp.org 
 */
EOT;
            $docBlock = DocBlockFactory::createInstance()->create($block);
            $operation = (new OperationDocBlock($swagger, $config, $this->operation, $docBlock))->getOperation();
            $this->assertNull($operation->getExternalDocs());
        }
    }

    /**
     * @throws InternalErrorException
     */
    public function test_link_tag_takes_precedence_over_see_tag(): void
    {
        $config = new Configuration($this->config, SWAGGER_BAKE_TEST_APP);
        $cakeRoute = new RouteScanner($this->router, $config);
        $cakeModels = new ModelScanner($cakeRoute, $config);
        $swagger = new Swagger($cakeModels);

        $block = <<<EOT
/** 
 * @see https://google.com nope
 * @link https://duckduckgo.com yep
 */
EOT;
        $docBlock = DocBlockFactory::createInstance()->create($block);
        $operation = (new OperationDocBlock($swagger, $config, $this->operation, $docBlock))->getOperation();
        $doc = $operation->getExternalDocs();
        $this->assertEquals('yep', $doc->getDescription());
        $this->assertEquals('https://duckduckgo.com', $doc->getUrl());
    }

    /**
     * @throws InternalErrorException
     */
    public function test_deprecated_tag(): void
    {

        $config = new Configuration($this->config, SWAGGER_BAKE_TEST_APP);
        $cakeRoute = new RouteScanner($this->router, $config);
        $cakeModels = new ModelScanner($cakeRoute, $config);
        $swagger = new Swagger($cakeModels);

        $block = <<<EOT
/** 
 * @deprecated 
 */
EOT;
            $docBlock = DocBlockFactory::createInstance()->create($block);
            $operation = (new OperationDocBlock($swagger, $config, $this->operation, $docBlock))->getOperation();
            $this->assertTrue($operation->isDeprecated());

    }
}