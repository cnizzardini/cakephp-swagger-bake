<?php

namespace SwaggerBake\Test\TestCase\Lib\Attribute;

use Cake\Routing\Router;
use Cake\Routing\RouteBuilder;
use Cake\TestSuite\TestCase;
use SwaggerBake\Lib\Model\ModelScanner;
use SwaggerBake\Lib\Route\RouteScanner;
use SwaggerBake\Lib\Configuration;
use SwaggerBake\Lib\Swagger;

class OpenApiDtoTest extends TestCase
{
    /**
     * @var string[]
     */
    public $fixtures = [
        'plugin.SwaggerBake.Employees',
    ];

    private Router $router;

    private Configuration $config;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $router = new Router();
        $router::scope('/', function (RouteBuilder $builder) {
            $builder->setExtensions(['json']);
            $builder->resources('Employees', [
                'only' => ['dtoPost','dtoQuery', 'dtoPublic','dtoPostLegacy','dtoQueryLegacy', 'dtoPublicLegacy'],
                'map' => [
                    'dtoPost' => [
                        'action' => 'dtoPost',
                        'method' => 'POST',
                        'path' => 'dto-post'
                    ],
                    'dtoPublic' => [
                        'action' => 'dtoPublic',
                        'method' => 'POST',
                        'path' => 'dto-public'
                    ],
                    'dtoQuery' => [
                        'action' => 'dtoQuery',
                        'method' => 'GET',
                        'path' => 'dto-query'
                    ],
                    'dtoPostLegacy' => [
                        'action' => 'dtoPostLegacy',
                        'method' => 'POST',
                        'path' => 'dto-post-legacy'
                    ],
                    'dtoPublicLegacy' => [
                        'action' => 'dtoPublicLegacy',
                        'method' => 'POST',
                        'path' => 'dto-public-legacy'
                    ],
                    'dtoQueryLegacy' => [
                        'action' => 'dtoQueryLegacy',
                        'method' => 'GET',
                        'path' => 'dto-query-legacy'
                    ],
                ]
            ]);
        });
        $this->router = $router;

        $this->config = new Configuration([
            'prefix' => '/',
            'yml' => '/config/swagger-bare-bones.yml',
            'json' => '/webroot/swagger.json',
            'webPath' => '/swagger.json',
            'hotReload' => false,
            'exceptionSchema' => 'Exception',
            'requestAccepts' => ['application/x-www-form-urlencoded'],
            'responseContentTypes' => ['application/json'],
            'namespaces' => [
                'controllers' => ['\SwaggerBakeTest\App\\'],
                'entities' => ['\SwaggerBakeTest\App\\'],
                'tables' => ['\SwaggerBakeTest\App\\'],
            ]
        ], SWAGGER_BAKE_TEST_APP);
    }

    public function test_openapi_dto_query(): void
    {
        $cakeRoute = new RouteScanner($this->router, $this->config);
        $swagger = new Swagger(new ModelScanner($cakeRoute, $this->config), $this->config);
        $arr = json_decode($swagger->toString(), true);


        $properties = ['lazy', 'first_name', 'last_name', 'title', 'age', 'date',];
        $operation = $arr['paths']['/employees/dto-query']['get'];
        foreach ($properties as $x => $property) {
            $this->assertEquals($property, $operation['parameters'][$x]['name']);
        }
    }

    public function test_openapi_dto_post(): void
    {
        $cakeRoute = new RouteScanner($this->router, $this->config);
        $swagger = new Swagger(new ModelScanner($cakeRoute, $this->config), $this->config);
        $arr = json_decode($swagger->toString(), true);


        $names = ['first_name', 'last_name', 'title', 'age', 'date', 'lazy', ];
        $operation = $arr['paths']['/employees/dto-post']['post'];
        $properties = $operation['requestBody']['content']['application/x-www-form-urlencoded']['schema']['properties'];
        foreach ($names as $property) {
            $this->assertArrayHasKey($property, $properties);
        }
    }
}