<?php

namespace SwaggerBake\Test\TestCase\Lib\Operation;

use Cake\Controller\Controller;
use Cake\Routing\Route\Route;
use Cake\Routing\RouteBuilder;
use Cake\Routing\Router;
use Cake\TestSuite\TestCase;
use PHPStan\BetterReflection\Reflection\ReflectionAttribute;
use SwaggerBake\Lib\Annotation\SwagSecurity;
use SwaggerBake\Lib\Attribute\OpenApiSecurity;
use SwaggerBake\Lib\Configuration;
use SwaggerBake\Lib\Factory\SwaggerFactory;
use SwaggerBake\Lib\OpenApi\Operation;
use SwaggerBake\Lib\Operation\OperationSecurity;
use SwaggerBake\Lib\Route\RouteDecorator;
use SwaggerBake\Lib\Route\RouteScanner;
use SwaggerBake\Lib\Swagger;

class OperationSecurityTest extends TestCase
{
    private Swagger $swagger;

    private RouteDecorator $routeDecorator;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $router = new Router();
        $router::scope('/', function (RouteBuilder $builder) {
            $builder->setExtensions(['json']);
            $builder->resources('Employees', [
                'only' => 'index'
            ]);
        });

        $config = [
            'prefix' => '/',
            'yml' => '/config/swagger-bare-bones.yml',
            'json' => '/webroot/swagger.json',
            'webPath' => '/swagger.json',
            'hotReload' => false,
            'exceptionSchema' => 'Exception',
            'requestAccepts' => ['application/x-www-form-urlencoded'],
            'responseContentTypes' => ['application/json'],
            'namespaces' => [
                'controllers' => ['\SwaggerBakeTest\App\\'],
                'entities' => ['\SwaggerBakeTest\App\\'],
                'tables' => ['\SwaggerBakeTest\App\\'],
            ]
        ];

        $this->routeDecorator = new RouteDecorator(
            new Route('//employees/:id', [
                '_method' => ['GET'],
                'plugin' => '',
                'controller' => 'Employees',
                'action' => 'view'
            ])
        );

        $configuration = new Configuration($config, SWAGGER_BAKE_TEST_APP);
        $cakeRoute = new RouteScanner($router, $configuration);
        $this->swagger = (new SwaggerFactory($configuration, $cakeRoute))->create();
    }

    public function test_from_security_attribute(): void
    {
        $mockReflectionMethod = $this->createPartialMock(\ReflectionMethod::class, ['getAttributes']);
        $mockReflectionMethod->expects($this->once())
            ->method(
                'getAttributes'
            )
            ->with(OpenApiSecurity::class)
            ->will(
                $this->returnValue([
                    new ReflectionAttribute(OpenApiSecurity::class, [
                        'name' => 'BearerAuth',
                        'scopes' => ['A', 'B'],
                    ]),
                ])
            );

        $operationSecurity = new OperationSecurity(
            new Operation('hello', 'get'),
            $mockReflectionMethod,
            $this->routeDecorator,
            new Controller(),
            $this->swagger
        );

        $operation = $operationSecurity->getOperationWithSecurity();
        $securities = $operation->getSecurity();
        $security = reset($securities);
        $this->assertEquals('BearerAuth', $security->getName());
        $this->assertCount(2, $security->getScopes());
    }

    public function test_from_auth_component(): void
    {
        $controller = new Controller();
        $controller->loadComponent('Authentication.Authentication');

        $operationSecurity = new OperationSecurity(
            new Operation('hello', 'get'),
            null,
            $this->routeDecorator,
            $controller,
            $this->swagger
        );
        $operation = $operationSecurity->getOperationWithSecurity();
        $securities = $operation->getSecurity();
        $security = reset($securities);
        $this->assertEquals('BearerAuth', $security->getName());
        $this->assertCount(0, $security->getScopes());
    }
}