<?php

namespace SwaggerBake\Test\TestCase\Lib\Schema;

use Cake\Controller\Controller;
use Cake\Datasource\ConnectionManager;
use Cake\TestSuite\TestCase;
use MixerApi\Core\Model\ModelFactory;
use SwaggerBake\Lib\Configuration;
use SwaggerBake\Lib\Decorator\EntityDecorator;
use SwaggerBake\Lib\Model\ModelDecorator;
use SwaggerBake\Lib\OpenApi\Schema;
use SwaggerBake\Lib\Schema\SchemaFactory;
use SwaggerBakeTest\App\Model\Entity\Department;
use SwaggerBakeTest\App\Model\Table\DepartmentsTable;

class SchemaFactoryTest extends TestCase
{
    /**
     * @var Configuration
     */
    private $configuration;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->configuration = new Configuration([
            'prefix' => '/api',
            'yml' => '/config/swagger-bare-bones.yml',
            'json' => '/webroot/swagger.json',
            'webPath' => '/swagger.json',
            'hotReload' => false,
            'exceptionSchema' => 'Exception',
            'requestAccepts' => ['application/x-www-form-urlencoded'],
            'responseContentTypes' => ['application/json'],
            'namespaces' => [
                'controllers' => ['\SwaggerBakeTest\App\\'],
                'entities' => ['\SwaggerBakeTest\App\\'],
                'tables' => ['\SwaggerBakeTest\App\\'],
            ]
        ], SWAGGER_BAKE_TEST_APP);
    }

    public function testCreateSchema()
    {
        $connection = ConnectionManager::get('default');
        $department = (new ModelFactory($connection, new DepartmentsTable()))->create();
        $decorator = new ModelDecorator($department, new Controller());
        $schema = (new SchemaFactory())->create($decorator);
        $this->assertInstanceOf(Schema::class, $schema);
    }

    public function testWriteSchema()
    {
        $connection = ConnectionManager::get('default');
        $department = (new ModelFactory($connection, new DepartmentsTable()))->create();
        $decorator = new ModelDecorator($department, new Controller());
        $schema = (new SchemaFactory())->create($decorator, SchemaFactory::WRITEABLE_PROPERTIES);
        $this->assertCount(1, $schema->getProperties());
    }
}